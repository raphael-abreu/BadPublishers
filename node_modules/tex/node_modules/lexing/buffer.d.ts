export declare type List<T> = {
    [index: number]: T;
    length: number;
};
/**
Returns true iff `haystack`, starting at fromIndex, matches `needle`.

To use Pythonic slice notation, returns the result of:

    haystack[fromIndex:fromIndex + needle.length] == needle
*/
export declare function compare(haystack: List<number>, needle: List<number>, fromIndex?: number): boolean;
/**
Returns the index (within `haystack`) of the first character of the first
occurrence of `needle` after fromIndex.

Returns undefined if haystack does not contain needle.
*/
export declare function indexOf(haystack: List<number>, needle: List<number>, fromIndex?: number): number;
/**
Returns the index (within `haystack`) of the first character of the last
occurrence of `needle` before fromIndex.

Returns undefined if haystack does not contain needle.
*/
export declare function lastIndexOf(haystack: List<number>, needle: List<number>, fromIndex?: number): number;
/**
Returns true iff the designated slices of left and right are equal.

Again, using Pythonic slice syntax, returns the result of:

    left[left_offset:left_length] == right[right_offset:right_length]
*/
export declare function equalTo(left: List<number>, right: List<number>, left_offset?: number, left_end?: number, right_offset?: number, right_end?: number): boolean;
